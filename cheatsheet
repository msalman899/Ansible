##############
Misc
##############

end_time: "{{ '%Y-%m-%d %H:%M:%S' | strftime(ansible_date_time.epoch | int + 600) }}"

##############
Ansible Vault
##############


#create/edit/view  encrypted file
ansible-vault create/edit/view lab6.final_vars_enc.yml #have to provide password
ansible-vault create/edit/view --vault-password-file=lab6.final_vaultpw lab6.final_vars_enc.yml #no need to provide pass

#encrypt and decrypt existing file
ansible-vault encrypt/decrypt lab6.final_vars_enc.yml --output=filename                            
ansible-vault encrypt/decrypt --vault-password-file=lab6.final_vaultpw lab6.final_vars_enc.yml  --output=filename 

#Execution
ansible-playbook --vault-password-file=lab6.final_vaultpw lab6.final.yml

################################# 
Selecting Hosts and Hosts pattern
#################################


[ansible-user@ansible-master training]$ ansible 'ansible-worker1' -i my-inventory --list-hosts
  hosts (1):
    ansible-worker1
[ansible-user@ansible-master training]$ ansible 'ansible-worker*' -i my-inventory --list-hosts
  hosts (3):
    ansible-worker2
    ansible-worker3
    ansible-worker1
[ansible-user@ansible-master training]$ ansible all -i my-inventory --list-hosts
  hosts (3):
    ansible-worker1
    ansible-worker2
    ansible-worker3
[ansible-user@ansible-master training]$
[ansible-user@ansible-master training]$ ansible 'worker3,*worker2' -i /home/ansible-user/training/my-inventory --list-hosts
  hosts (2):
    ansible-worker3
    ansible-worker2
[ansible-user@ansible-master training]$ ansible '*worker2' -i /home/ansible-user/training/my-inventory -m ping
ansible-worker2 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}

################################# 
Troubleshooting playbooks
#################################


#To print logs to some file, 
1 - set "log_path = filename" in ansible.cfg 
2 - set $ANSIBLE_LOG_PATH

# to check your playbook syntax
ansible-playbook playbook.yml --syntax-check 

# execute tasks interactively and one by one
ansible-playbook playbook.yml --step 

# execute tasks interactively and one by one
ansible-playbook  playbook.yml --start-at-task="taskname"

#debug module
- debug:
   msg: "some msg {{ var }} "
   var: output
   verbosity: 2
   
#perform a test without modifying anything on the target host
ansible-playbook --check playbook.yml

-- can specify for individual task by:
check_more: yes
check_mode:no 
check_mode: always_run (if task needs to be executed in check mode)

-- to see changes that will be applied to managed hosts using jinja templates
ansible-playbook --check --diff playbook.yml
ansible-playbook --check playbook.yml

#some modules for testing
uri (can connect to a URL and check for specific content)
script (supports execution of scripts on managed host)
stat (can heck that files are present)
assert (module to work on the outcome of stat)

#adhoc commands
ansible server1 -m package -a "name=https state=present"
ansible server1 -m shell -a "df -h
ansible server1 -m user -a "name=linda"
