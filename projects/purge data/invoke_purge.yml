- name: Checking if any client finished purge - iteration {{ iteration }}
  shell: ps aux | grep {{item}}.sh
  register: finished_purge_client
  loop: "{{ client.stdout_lines }}"

#- debug:
#   var: finished_purge_client

- name: Checking if data are available to be purged
  shell: |
         source ~/profile; sqlplus -s {{ item.item }}/{{ dbpass }}@{{ dbsid }} <<EOF
         SET pagesize 0
         SET HEAD OFF
         SET VERIFY OFF
         SET trimspool on
         SET LIN 200

         select (case when count > 0 then 'data Available' else 'No data' end) as status from (select count(*) as count from table);
         exit;
         EOF
  register: finished_runs_client
  loop: "{{ finished_purge_client.results }} "
  loop_control:
   label: "{{ item.item }}"

- name: Status
  vars:
    msg: |
         {% for i in finished_runs_client.results %}
         {{i.item.item }}: ({{i.stdout}}, {% if i.item.stdout_lines | length  < 3 %} Purge Finished {% else %} Purge InProgress {% endif %})
         {% endfor %}
  debug:
   msg: "{{ msg.split('\n') }}"

- name: Kicking Off Purge
  shell: echo > {{ src_dir }}/work_dir/{{ item.item.item }}_{{ job_id }}_{{iteration}}.log &
  args:
   chdir: "{{ src_dir }}/work_dir/{{ item.item.item }}/"
  when: (item.stdout is defined) and (item.stdout == "data Available") and (item.item.stdout_lines | length  < 3)
  loop: "{{ finished_runs_client.results }} "
  loop_control:
   label: "{{ item.item.item }}"

- debug:
   msg: "Kicking off purge {{ item.item.item }} - iteration {{ iteration }} - JobId {{ job_id }}"
  when: (item.stdout is defined) and (item.stdout == "data Available") and (item.item.stdout_lines | length  < 3)
  loop: "{{ finished_runs_client.results }} "
  loop_control:
   label: "{{ item.item.item }}"

#- debug:
#   msg: "{{ finished_runs_client.results }}"

- block:
   - name: Break loop if no data left
     debug:
      msg: "No data left to be purged, thus exiting job"
   - include_tasks: post_purge.yml
   - meta: end_play
  when: "'data Available' not in finished_runs_client.results | map(attribute='stdout') | select('defined') | map('regex_replace','data Available - .*','data Available') | list"

- name: Waiting for 15 minutes
  command: sleep 15m
