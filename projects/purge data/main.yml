- name: Data Purge
  hosts: "{{ host }}"
  force_handlers: yes
  vars:
   dbpass:
   dbsid: 
   window:
   data_to_delete:
   src_dir: /some/dir
   job_id: "{{ '%Y%m%d_%H%M%S' | strftime(ansible_date_time.epoch) }}"
   iter_end: "{{ (window * 60 / 15) | int}}"

  tasks:

   - name: Generating list
     shell: |
            source ~/.profile; sqlplus -s {{ dbuser }}/{{ dbpass }}@{{ dbsid }} <<EOF
            SET pagesize 0
            SET HEAD OFF
            SET VERIFY OFF
            SET trimspool on
            SET LIN 200

            select name from table;
            exit;
            EOF
     register: client

   - name: Fetching policy
     shell: |
            source ~/profile; sqlplus -s {{ dbuser }}/{{ dbpass }}@{{ dbsid }} <<EOF
            SET pagesize 0
            SET HEAD OFF
            SET VERIFY OFF
            SET trimspool on
            SET LIN 200

            select name,policy from table where policy is not null;
            exit;
            EOF
     register: client_policy

   - block:
      - name: Exit if No client list found
        debug:
         msg: "No client list found, thus existing job"

      - meta: end_play
     when: (client.stdout_lines is not defined) or (client.stdout_lines |length == 0)


   - debug:
      msg: " Total iterations - {{ iter_end }}"


   - name: Mark flag
     shell: |
            source ~/profile; sqlplus -s {{ item[1] }}_{{ item[0].split()[0] }}/{{ dbpass }}@{{ dbsid }} <<EOF
            SET pagesize 0
            SET HEAD OFF
            SET VERIFY OFF
            SET trimspool on
            SET LIN 200

            {% if item[1] == 'XYZ' %} select count(1), '{{ item[0].split()[1] }}' as policy from table1;
            {% else %} select count(1), '{{ item[0].split()[1] }}' as policy from table2;
            {%endif%}
            exit;
            EOF
     loop: "{{ client_policy.stdout_lines |product(['ABC','XYZ']) | list }}"

   - name: Cleaning up directory
     shell: 
     register: res
     args:
       chdir: "{{ src_dir }}"
       warn: false

   - name: Creating working directory
     file:
      path: "{{src_dir}}/work_folder"
      state: directory


   - name: Copying data to working directory
     shell: |
     args:
       chdir: "{{ src_dir }}"
       warn: false


   - name: Preparing file
     shell: |
     args:
       chdir: "{{src_dir}}/work_folder"
       warn: false
     loop: "{{ client.stdout_lines }}"


   - include_tasks: invoke_purge.yml
     loop: "{{ range(1, (iter_end)|int + 1  ,1) | list}}"
     loop_control:
      loop_var: iteration

   - include_tasks: post_purge.yml
